# Adam Jensen <acj@msu.edu>
# 3/27/2009
# Originally adapted from tutorial4.params and koza.params

# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

#
# This file roughly defines a typeless, Koza-I-style
# generational GP system with a single tree (meaning
# no ADFs or ADMs.  We use Tournament selection instead
# of Koza-style Fitness-proportionate selection because
# fitness-proportionate selection, well, is kinda icky.
#

parent.0 = ../ec.params

#seed.0 = 				1234
#seed.0 =				5678
seed.0 = 4

# ec.Evolve
# ==============================

# simple generational evolution
state = 				ec.simple.SimpleEvolutionState

# ec.EvolutionState
# ==============================

# We're using the standard initialization method
init = 					ec.simple.SimpleInitializer

# We're using the standard (empty) finalization method
finish = 	        		ec.simple.SimpleFinisher

# We're using the standard (empty) exchange method
exch = 					ec.simple.SimpleExchanger

# We're using standard breeding -- no cross-population breeding
breed =					ec.simple.SimpleBreeder

# We're using standard evaluation -- no coevolution
eval =					ec.simple.SimpleEvaluator

# We're using simple statistics
stat =					ec.simple.SimpleStatistics

generations =				10
quit-on-run-complete =			true

# ec.Initializer
# ==============================

pop = 					ec.Population


# ec.Population
# ==============================

# No multiple populations
pop.subpops =				1
pop.subpop.0 = 				ec.Subpopulation

#pop.subpop.0.file = seed.pop

# ec.Subpopulation
# ==============================

# subpop size is 1024 individuals
#pop.subpop.0.size =			200
pop.subpop.0.size =			100

# TODO
# Fact file used to build our annotated graph
#ec.refactoring.factfile = "cse891hw-annotated.facts"

# don't bother trying to eliminate duplicates from the
# initial population
pop.subpop.0.duplicate-retries =	0

# ==You need to provide the species info for the subpopulation.==

# ec.simple.SimpleBreeder
# ==============================

# By default elitism isn't done.  If you want to do elitism for, say,
# the top 10 individuals in subpopulation 0, you'd say:

#breed.elite.0 = 			10


# ec.SimpleStatistics
# ==============================

# output statistics to the file "out.stat" in the directory
# the run was started in
stat.file				$out.stat

pop.subpop.0.species.fitness = ec.simple.SimpleFitness

init = ec.gp.GPInitializer
stat = ec.refactoring.RefactorStatistics

pop.subpop.0.species = ec.refactoring.RefactorSpecies
pop.subpop.0.species.ind = ec.refactoring.RefactorIndividual

# We retry 100 times for duplicates (this is the lil-gp default)
# in our subpopulation 0
pop.subpop.0.duplicate-retries = 100

# That GPIndividual has a single tree, which uses the
# "tc0" Tree Constraints (which we define below later)
pop.subpop.0.species.ind.numtrees = 1
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = tc0

pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
# Koza's decision here was odd...
pop.subpop.0.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 2
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.9
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.1
pop.subpop.0.species.pipe.source.1.source.0 = ec.select.TournamentSelection

# This information is used by the koza.CrossoverPipeline above
gp.koza.xover.source.0 = ec.select.TournamentSelection
gp.koza.xover.source.1 = same
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same
gp.koza.xover.maxdepth = 4
gp.koza.xover.tries = 1

gp.koza.mutate.source.0 = ec.select.TournamentSelection
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth = 4
gp.koza.mutate.tries = 1

#
# The default tournament size for TournamentSelection is 7
#
select.tournament.size = 7

# Since GROW is only used for subtree mutation, ECJ uses
# the Koza-standard subtree mutation GROW values for the
# default for GROW as a whole.  This default is
# min-depth=max-depth=5, which I don't like very much,
# but hey, that's the standard.  
# This means that if someone decided to use GROW to generate
# new individual trees, it's also use the defaults below
# unless he overrided them locally.
gp.koza.grow.min-depth = 1
gp.koza.grow.max-depth = 5

#
# We specify a few things about ADFs  -- what kind 
# of stack they use, and what kind of context
eval.problem.stack = ec.gp.ADFStack
eval.problem.stack.context = ec.gp.ADFContext

# 
# Here we define the default values for KozaNodeSelection;
# as always, these can be overridden by values hanging off
# of the Crossover/Reproduction/Mutation/whatever pipelines,
# like we did for node-building, but hey, whatever. 
# The default is 10% terminals, 90% nonterminals when possible,
# 0% "always pick the root", 0% "pick any node"

gp.koza.ns.terminals = 0.1
gp.koza.ns.nonterminals = 0.9
gp.koza.ns.root = 0.0

# Here we define one GPTreeConstraints object, "tc0",
# which uses ec.gp.koza.HalfBuilder to create nodes,
# only allows nodes from the GPFunctionSet "fset",
# and has the single type "nil" as its tree type.
# You don't need to include the class declaration here,
# but it quiets warnings.

gp.tc.size = 1
gp.tc.0 = ec.gp.GPTreeConstraints
gp.tc.0.name = tc0
gp.tc.0.fset = f0
gp.tc.0.returns = nil

# The tree uses an ec.gp.koza.HalfBuilder to create
# itself initially.
# HalfBuilder will pick GROW half the time and FULL
# the other half, with a ramp from 2 to 6 inclusive.
# By ramp we mean that it first picks a random number between
# 2 and 6 inclusive.  This then becomes the *maximum* tree size
# (for the FULL approach, it's the tree size of the tree, for
# GROW, the tree can get no bigger than this)

#gp.tc.0.init = ec.gp.koza.HalfBuilder
gp.tc.0.init = ec.gp.build.Uniform
gp.tc.0.init.min-size = 5
gp.tc.0.init.max-size = 15

# We set the default for HalfBuilder to be a ramp of 2--6,
# with a grow probability of 0.5
#gp.koza.half.min-depth = 2
#gp.koza.half.max-depth = 6
#gp.koza.half.growp = 0.5

# the next four items are already defined in koza.params, but we
# put them here to be clear.

# We have one function set, of class GPFunctionSet
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
# We'll call the function set "f0".  It uses the default GPFuncInfo class
gp.fs.0.name = f0
gp.fs.0.info = ec.gp.GPFuncInfo

# Primitive types
#   - Atomic -
gp.type.a.size = 6
gp.type.a.0.name = ClassNode
gp.type.a.1.name = OperNode
gp.type.a.2.name = IfaceNode
gp.type.a.3.name = StringNode
gp.type.a.4.name = RootNode
gp.type.a.5.name = nil

#   - Set -
gp.type.s.size = 1
gp.type.s.0.name = ClassOrIfaceNode
gp.type.s.0.size = 2
gp.type.s.0.member.0 = ClassNode
gp.type.s.0.member.1 = IfaceNode

# Node constraints
gp.nc.size = 8

gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = AbstractAccess-nc
gp.nc.0.returns = IfaceNode
gp.nc.0.size = 3
gp.nc.0.child.0 = ClassNode
gp.nc.0.child.1 = ClassNode
gp.nc.0.child.2 = IfaceNode

gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = Abstraction-nc
gp.nc.1.returns = IfaceNode
gp.nc.1.size = 2
gp.nc.1.child.0 = ClassNode
gp.nc.1.child.1 = StringNode

gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = EncapsulateConstruction-nc
gp.nc.2.returns = ClassNode
gp.nc.2.size = 2
gp.nc.2.child.0 = ClassNode
gp.nc.2.child.1 = ClassNode

gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = PartialAbstraction-nc
gp.nc.3.returns = ClassNode
gp.nc.3.size = 2
gp.nc.3.child.0 = ClassNode
gp.nc.3.child.1 = StringNode

gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = StringNode-nc
gp.nc.4.returns = StringNode
gp.nc.4.size = 0

gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = ClassNode-nc
gp.nc.5.returns = ClassNode
gp.nc.5.size = 0

gp.nc.6 = ec.gp.GPNodeConstraints
gp.nc.6.name = IfaceNode-nc
gp.nc.6.returns = IfaceNode
gp.nc.6.size = 0

gp.nc.7 = ec.gp.GPNodeConstraints
gp.nc.7.name = RootNode-nc
gp.nc.7.returns = nil
gp.nc.7.size = 3
gp.nc.7.child.0 = ClassOrIfaceNode
gp.nc.7.child.1 = ClassOrIfaceNode
gp.nc.7.child.2 = ClassOrIfaceNode

gp.tc.0.returns = nil

# Function set
gp.fs.0.size = 8
gp.fs.0.func.0 = ec.refactoring.AbstractAccess
gp.fs.0.func.0.nc = AbstractAccess-nc
gp.fs.0.func.1 = ec.refactoring.Abstraction
gp.fs.0.func.1.nc = Abstraction-nc
gp.fs.0.func.2 = ec.refactoring.EncapsulateConstruction
gp.fs.0.func.2.nc = EncapsulateConstruction-nc
gp.fs.0.func.3 = ec.refactoring.PartialAbstraction
gp.fs.0.func.3.nc = PartialAbstraction-nc
gp.fs.0.func.4 = ec.refactoring.StringNode
gp.fs.0.func.4.nc = StringNode-nc
gp.fs.0.func.5 = ec.refactoring.ClassNode
gp.fs.0.func.5.nc = ClassNode-nc
gp.fs.0.func.6 = ec.refactoring.IfaceNode
gp.fs.0.func.6.nc = IfaceNode-nc
gp.fs.0.func.7 = ec.refactoring.RootNode
gp.fs.0.func.7.nc = RootNode-nc

eval.problem = ec.refactoring.RefactorProblem
eval.problem.data = ec.refactoring.RefactorData

# The following should almost *always* be the same as eval.problem.data
# For those who are interested, it defines the data object used internally
# inside ADF stack contexts
eval.problem.stack.context.data = ec.refactoring.RefactorData
