# Adam Jensen <acj@msu.edu>
# 3/27/2009
# Originally adapted from tutorial4.params

parent.0 = ../gp/koza/koza.params

# the next four items are already defined in koza.params, but we
# put them here to be clear.

# We have one function set, of class GPFunctionSet
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
# We'll call the function set "f0".  It uses the default GPFuncInfo class
gp.fs.0.name = f0
gp.fs.0.info = ec.gp.GPFuncInfo

# Primitive types
#   - Atomic -
gp.type.a.size = 8
gp.type.a.0.name = AbstractAccess
gp.type.a.1.name = Abstraction
gp.type.a.2.name = EncapsulateConstruction
gp.type.a.3.name = PartialAbstraction
gp.type.a.4.name = AnnotatedVertex
gp.type.a.5.name = nil
gp.type.a.6.name = String
gp.type.a.7.name = SetNode
#   - Set -
gp.type.s.size = 2
gp.type.s.0.name = MT-S
gp.type.s.0.size = 4
gp.type.s.0.member.0 = Abstraction 
gp.type.s.0.member.1 = AbstractAccess
gp.type.s.0.member.2 = EncapsulateConstruction
gp.type.s.0.member.3 = PartialAbstraction
gp.type.s.1.name = Set-S
gp.type.s.1.size = 2
gp.type.s.1.member.0 = SetNode
gp.type.s.1.member.1 = nil

# Node constraints
gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = AbstractAccess
gp.nc.0.returns = nil
gp.nc.0.size = 3
gp.nc.0.child.0 = AnnotatedVertex
gp.nc.0.child.1 = AnnotatedVertex
gp.nc.0.child.2 = AnnotatedVertex

gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = Abstraction
gp.nc.1.returns = MT-S
gp.nc.1.size = 2
gp.nc.1.child.0 = AnnotatedVertex
gp.nc.1.child.1 = String

gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = EncapsulateConstruction
gp.nc.2.returns = MT-S
gp.nc.2.size = 2
gp.nc.2.child.0 = AnnotatedVertex
gp.nc.2.child.1 = AnnotatedVertex

gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = PartialAbstraction
gp.nc.3.returns = MT-S
gp.nc.3.size = 2
gp.nc.3.child.0 = AnnotatedVertex
gp.nc.3.child.1 = String

gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = VertexNode
gp.nc.4.returns = AnnotatedVertex
gp.nc.4.size = 0

gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = StringNode
gp.nc.5.returns = String
gp.nc.5.size = 0

gp.nc.6 = ec.gp.GPNodeConstraints
gp.nc.6.name = SetNode
gp.nc.6.returns = Set-S
gp.nc.6.size = 2
gp.nc.6.child.0 = MT-S
gp.nc.6.child.1 = Set-S

gp.tc.0.returns = nil

# Function set
gp.fs.0.size = 7
gp.fs.0.func.0 = ec.refactoring.AbstractAccess
gp.fs.0.func.0.nc = AbstractAccess
gp.fs.0.func.1 = ec.refactoring.Abstraction
gp.fs.0.func.1.nc = Abstraction
gp.fs.0.func.2 = ec.refactoring.EncapsulateConstruction
gp.fs.0.func.2.nc = EncapsulateConstruction
gp.fs.0.func.3 = ec.refactoring.PartialAbstraction
gp.fs.0.func.3.nc = PartialAbstraction
gp.fs.0.func.4 = ec.refactoring.VertexNode
gp.fs.0.func.4.nc = VertexNode
gp.fs.0.func.5 = ec.refactoring.StringNode
gp.fs.0.func.5.nc = StringNode
gp.fs.0.func.6 = ec.refactoring.SetNode
gp.fs.0.func.6.nc = SetNode

eval.problem = ec.refactoring.RefactorProblem
eval.problem.data = ec.refactoring.RefactorData
# The following should almost *always* be the same as eval.problem.data
# For those who are interested, it defines the data object used internally
# inside ADF stack contexts
eval.problem.stack.context.data = ec.refactoring.RefactorData

